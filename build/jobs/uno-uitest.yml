jobs:

- job: UnoUITest_Wasm
  displayName: Uno UITest WebAssembly

  container: unoplatform/wasm-build:2.0

  pool:
    vmImage: $(LinuxImage)

  workspace:
    clean: all

  steps:

  - bash: |
      build/scripts/wasm-uitest-run.sh

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"

    displayName: 'Run UI Tests'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'WebAssembly Test Run'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult.xml'
      searchFolder: '$(build.artifactstagingdirectory)/e2e/uno/wasm' # https://github.com/microsoft/azure-pipelines-tasks/issues/10072

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: UnoUITests
      ArtifactType: Container


- job: UnoUITest_Android
  displayName: Uno UITest Android

  pool:
    vmImage: $(MacImage)

  workspace:
    clean: all

  steps:
  - template: ../steps/set-runtime.yml

  - bash: |
      build/scripts/android-uitest-run.sh

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"

    displayName: 'Run UI Tests'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testRunTitle: 'Android Test Run'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult.xml'

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: UnoUITests
      ArtifactType: Container


- job: UnoUITest_iOS
  displayName: Uno UITest iOS

  pool:
    vmImage: $(MacImage)

  workspace:
    clean: all

  steps:
  - template: ../steps/set-runtime.yml

  - bash: |
      build/scripts/ios-uitest-run.sh

    env:
      BUILD_SOURCESDIRECTORY: "$(build.sourcesdirectory)"
      BUILD_ARTIFACTSTAGINGDIRECTORY: "$(build.artifactstagingdirectory)"

    displayName: 'Run UI Tests'

  - task: PublishTestResults@2
    inputs:
      testRunTitle: 'iOS Test Run'
      testResultsFormat: 'NUnit'
      testResultsFiles: '$(build.sourcesdirectory)/build/TestResult.xml'

  - task: PublishBuildArtifacts@1
    condition: always()
    inputs:
      PathtoPublish: $(build.artifactstagingdirectory)
      ArtifactName: UnoUITests
      ArtifactType: Container

